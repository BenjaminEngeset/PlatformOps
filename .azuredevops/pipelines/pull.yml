name: "PlatformOps - Pull"

#
# Triggers
# Automated triggers are configured via branch policies
# within the repo.
#

trigger: none

#
# Schedule
# This is an trigger to pull the latest Azure
# hierarchy into the repo in a recurring
# manner.
#
# Default: Every 8 hours to reflect a working day.
#

schedules:
  - cron: "0 */8 * * *"
    branches:
      include:
        - main
    always: true

#
# Pipelines
# Triggers this pipeline upon the completion of
# the Push pipeline.
#

resources:
  pipelines:
    - pipeline: "TriggerPull"
      source: "PlatformOps - Push"
      trigger:
        branches:
          include:
            - main

variables:
  
  #
  # Shared variables
  # Include shared variables from the 'vars.yml' file
  # to not have to repeat them in every pipeline.
  #

  - template: templates/vars.yml

  #
  # Folder Name
  # Generate the hierachy within the the repo.
  #
  # Default: root
  #

  - name: folder
    value: "root"

  #
  # Branch Name
  # As part of the Pull pipeline we create a temporary branch.
  #
  # Default: automated
  #

  - name: branch
    value: "automated"

  #
  # Commit Message
  # During the Pull pipeline, the changes are commited to the
  # temporary branch.
  #
  # Default: Automated commit
  #

  - name: commit_message
    value: "Automated commit"

  #
  # Pull Request
  # The generated name for the pull request for the Pull pipeline.
  #
  # Default: Automated state
  #

  - name: pull_request
    value: "Automated State"

jobs:

  - job: pull

    #
    # Pull
    #

    displayName: "Pull"
    pool:
      vmImage: "ubuntu-20.04"

    steps:

      #
      # Shared steps
      # Include shared steps from the 'shared-steps.yml' file
      # to not have to repeat them in every pipeline.
      #

      - template: templates/shared-steps.yml

      #
      # Configure
      # Set global options.
      #

      - task: Bash@3
        displayName: "Configure"
        inputs:
          targetType: "inline"
          script: |
            git config user.name "Azure DevOps"
            git config user.email "azuredevops@microsoft.com"

      #
      # Checkout
      # Create a new branch and switch branches.
      #

      - task: Bash@3
        displayName: "Checkout"
        inputs:
          targetType: "inline"
          script: |
            git checkout -b $(branch)

      #
      # Initialize
      # Generate new state data.
      #

      - task: PowerShell@2
        displayName: "Initialize"
        inputs:
          targetType: "inline"
          script: |
            $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator
            Import-PSFConfig -Path settings.json -Schema MetaJson -EnableException
            Invoke-AzOpsPull -Rebuild
            Get-Job | Remove-Job -Force

      #
      # Status
      # Check for data changes.
      #

      - task: Bash@3
        displayName: "Status"
        inputs:
          targetType: "inline"
          script: |
            STATUS=$(git status --short $(folder))
            echo $STATUS
            if [ -z "$STATUS" ]
            then
              echo "##vso[task.setvariable variable=state]stop"
            else
              echo "##vso[task.setvariable variable=state]continue"
            fi

      #
      # Add
      # Add file content to index.
      #

      - task: Bash@3
        displayName: "Add"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git add ./$(folder)

      #
      # Commit
      # Record changes to the repo.
      #

      - task: Bash@3
        displayName: "Commit"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git commit -m "$(commit_message)"

      #
      # Push
      # Update remote refs along with associated objects.
      #

      - task: Bash@3
        displayName: "Push"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git push origin $(branch) -f

      #
      # Merge
      # Update remote refs along with associated objects.
      #

      - task: Bash@3
        displayName: "Merge"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            # Open new PR
            PROut=$(
              az repos pr create \
              --title "$(pull_request)" \
              --source-branch "$(branch)" \
              --target-branch "main" \
              --squash true \
              --delete-source-branch true \
              --auto-complete true \
            );

            # Get PR ID and check status.
            PRid=$(echo $PROut | jq -r '.pullRequestId');
            PRStatus=$(az repos pr show --id $PRid | jq .status);

            # If PR is not completed, then complete it bypassing policy.
            if [ $PRStatus == "\"active\"" ]; then
              echo "Completing PR bypassing branch policy."
              az repos pr update --status completed --id $PRid --bypass-policy true --bypass-policy-reason "Automated pull request" > /dev/null 2>&1
            fi;
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
