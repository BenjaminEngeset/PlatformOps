parameters:
  - name: deploy
    type: boolean
    default: false

steps:

  #
  # Diff
  # List index changes.
  #

  - task: PowerShell@2
    displayName: "Diff"
    inputs:
      targetType: "inline"
      script: |
        $gitDiff = git diff --name-status HEAD^ HEAD
        if($null -ne $gitDiff) {
            $gitDiff | Write-Host
            $gitDiff | Out-File -FilePath '/tmp/diff.txt'
            
            $deletedContent = git diff --diff-filter=D HEAD^ HEAD --no-prefix --no-renames
            if($null -ne $deletedContent) {
                $deletedContent = $deletedContent -match '^-' -replace '^([^-+ ]*)[-+ ]', '$1'
                Write-Host '##[group]Deleted files content'
                $deletedContent | Write-Host
                Write-Host '##[endgroup]'
                $deletedContent | Out-File -FilePath '/tmp/diffdeletedfiles.txt'
            }
        }
        else {
            Write-Host '##[error]The validation pipeline failed because there is currently no change to be processed'
            exit 1
        }

  #
  # Validate or Deploy
  # If parameter "deploy" is set to true, then deploy the changes,
  # otherwise validate the changes.
  #
  
  #
  # Validate
  # Run Well-Architected Framework to validate the contents of the Bicep files.
  #

  - ${{ if ne(parameters.deploy, true) }}:
    - task: AzurePowerShell@5
      displayName: "Validate Bicep files with Well-Architected Framework"
      inputs:
        ConnectedServiceNameARM: $(ARM_SERVICE_NAME)
        scriptType: "inlineScript"
        inline: |
          Write-Host "##vso[task.setvariable variable=waf]results"
          Install-Module PSRule.Rules.Azure -Scope CurrentUser -Force;
          git diff --diff-filter=d HEAD^ HEAD --name-only | ForEach-Object { Get-ChildItem $_ } | Assert-PSRule -Format File -Module 'PSRule.Rules.Azure' -Baseline 'Azure.GA_2022_06' -OutputFormat NUnit3 -OutputPath 'reports/ps-rule-results.xml'
        azurePowerShellVersion: latestVersion

  #
  # Validate
  # Preview the effects of the deployment.
  #

  - task: PowerShell@2
    ${{ if ne(parameters.deploy, true) }}:
      displayName: "Validate with WhatIf operation"
    ${{ else }}:
      displayName: "Deploy"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[task.setvariable variable=whatif]results"
        $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator
        $RunWhatIf = -not ('${{parameters.deploy}}' -eq 'true')
        Import-PSFConfig -Path settings.json -Schema MetaJson -EnableException
        Initialize-AzOpsEnvironment
        $diff = Get-Content -Path /tmp/diff.txt
        if(Test-Path -Path "/tmp/diffdeletedfiles.txt") {
          $diffdeletedfiles = Get-Content -Path /tmp/diffdeletedfiles.txt
          Invoke-AzOpsPush -ChangeSet $diff -DeleteSetContents $diffdeletedfiles -WhatIf:$RunWhatIf
        } 
        else {
          Invoke-AzOpsPush -ChangeSet $diff -WhatIf:$RunWhatIf
        }
        Get-Job | Remove-Job -Force

  #
  # Validate
  # Run MegaLinter on files in the code base.
  #

  - ${{ if ne(parameters.deploy, true) }}:
    - task: Bash@3
      displayName: "Validate files with MegaLinter"
      inputs:
        targetType: "inline"
        script: |
          echo "##vso[task.setvariable variable=megalinter]results"
          docker pull oxsecurity/megalinter:v6
          docker run -v $(System.DefaultWorkingDirectory):/tmp/lint -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) oxsecurity/megalinter:v6
